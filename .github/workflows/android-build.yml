name: Build & Auto-Release WkWhisperKey (Manual Core/Build Cache)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    name: Android Build + Manual Cache System

    steps:
      - name: 🧩 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: 🧱 Initialize Gradle Wrapper
        run: bash scripts/init-gradle.sh

      - name: 📁 Prepare Cache Folder
        run: mkdir -p .cache

      # -------------------------
      # ♻️ RESTORE CACHES
      # -------------------------
      - name: ♻️ Restore Core Tools (NDK/CMake)
        run: |
          CORE_ARCHIVE=".cache/core-${RUNNER_OS}.tar.zst"
          if [ -f "$CORE_ARCHIVE" ]; then
            echo "📦 Restoring core cache..."
            sudo tar --zstd -xf "$CORE_ARCHIVE" -P -C /
            echo "✅ Core tools restored."
          else
            echo "⚠️ No core cache found."
          fi

          # Save pre-build hash for later comparison
          find /usr/local/lib/android/sdk/{ndk,cmake} -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | sort > .cache/corelist_before.txt
          sha256sum .cache/corelist_before.txt | cut -d ' ' -f1 > .cache/corehash_before.txt

      - name: ♻️ Restore Build Cache (branch)
        run: |
          BRANCH=${GITHUB_REF_NAME//\//-}
          BUILD_ARCHIVE=".cache/build-${BRANCH}.tar.zst"
          if [ -f "$BUILD_ARCHIVE" ]; then
            echo "📦 Restoring build cache for branch $BRANCH ..."
            tar --zstd -xf "$BUILD_ARCHIVE" -P -C .
            echo "✅ Build cache restored."
          else
            echo "⚠️ No build cache found for branch $BRANCH."
          fi

      - name: 🧹 Clean Ghost Files
        run: |
          git clean -fdX
          echo "✅ Cleaned untracked files."

      # -------------------------
      # 🚀 BUILD
      # -------------------------
      - name: 🚀 Build Android Debug APK
        run: |
          set -e
          ./gradlew --no-daemon :android:app:assembleDebug | tee build.log
          EXIT_CODE=${PIPESTATUS[0]}
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Gradle build failed with exit code $EXIT_CODE"
            exit $EXIT_CODE
          fi

      # -------------------------
      # 💾 CONDITIONAL CACHE SAVE
      # -------------------------
      - name: 💾 Save Core Cache (only if changed)
        if: always()
        run: |
          find /usr/local/lib/android/sdk/{ndk,cmake} -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | sort > .cache/corelist_after.txt
          sha256sum .cache/corelist_after.txt | cut -d ' ' -f1 > .cache/corehash_after.txt
          BEFORE=$(cat .cache/corehash_before.txt 2>/dev/null || echo none)
          AFTER=$(cat .cache/corehash_after.txt)
          echo "Before: $BEFORE"
          echo "After:  $AFTER"
          if [ "$BEFORE" != "$AFTER" ]; then
            echo "🗜 Core tools changed — saving new cache..."
            CORE_ARCHIVE=".cache/core-${RUNNER_OS}.tar.zst"
            sudo tar --zstd -cf "$CORE_ARCHIVE" -P /usr/local/lib/android/sdk/{ndk,cmake}
            du -sh "$CORE_ARCHIVE"
          else
            echo "✅ Core tools unchanged — skip saving."
          fi

      - name: 💾 Save Build Cache (branch)
        if: always()
        run: |
          BRANCH=${GITHUB_REF_NAME//\//-}
          BUILD_ARCHIVE=".cache/build-${BRANCH}.tar.zst"
          echo "🗜 Saving build cache for branch $BRANCH ..."
          tar --zstd -cf "$BUILD_ARCHIVE" -P android/app/build
          du -sh "$BUILD_ARCHIVE"

      # -------------------------
      # 📦 APK UPLOAD + RELEASE
      # -------------------------
      - name: 📦 Upload APK Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: wkwhisperkey-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk

      - name: 🔢 Compute Next Tag
        id: tag
        run: |
          last=$(git describe --tags --abbrev=0 2>/dev/null || echo "wk-v0.1.0")
          base=${last%.*}
          num=${last##*.}
          next=$((num + 1))
          echo "next_tag=${base}.${next}" >> $GITHUB_OUTPUT
          echo "Next tag: ${base}.${next}"

      - name: 📜 Extract Tail of Build Log
        id: taillog
        if: always()
        run: |
          echo "tail<<EOF" >> $GITHUB_OUTPUT
          tail -n 20 build.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🚀 Create GitHub Release
        if: github.ref == 'refs/heads/main' && success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.next_tag }}
          name: "WkWhisperKey ${{ steps.tag.outputs.next_tag }}"
          body: |
            🧩 **WkWhisperKey Android Build**
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            - **Gradle:** 8.7
            - **NDK/CMake:** manually cached
            - **Build Time:** ${{ github.run_started_at }}

            ### 🧱 Build Log (tail)
            ```
            ${{ steps.taillog.outputs.tail }}
            ```

            _Auto-generated by GitHub Actions_
          files: android/app/build/outputs/apk/debug/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
