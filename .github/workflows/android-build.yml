name: Build & Auto-Release WkWhisperKey Android APK

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build:
    name: Kotlin Multiplatform + Android Build
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 저장소 체크아웃
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      # 2️⃣ JDK 환경
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3️⃣ NDK 캐시 복원 (Save 없음)
      - name: ♻️ Restore NDK cache
        uses: actions/cache/restore@v4
        with:
          path: /usr/local/lib/android/sdk/ndk/26.1.10909125
          key: ndk-${{ runner.os }}-26.1.10909125
          restore-keys: |
            ndk-${{ runner.os }}-

      # 4️⃣ Android SDK + NDK 설치 (없을 경우만)
      - name: 📱 Install Android SDK + NDK
        uses: android-actions/setup-android@v3
        with:
          ndk: 26.1.10909125

      # 5️⃣ Gradle 캐시 복원
      - name: ♻️ Restore Gradle cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 6️⃣ gradlew 자동 생성
      - name: 🧱 Ensure Gradle Wrapper
        run: |
          if [ ! -f gradlew ]; then
            echo "Gradle wrapper not found — creating..."
            gradle wrapper --gradle-version 8.7
          fi
          chmod +x gradlew

      # 7️⃣ 빌드 실행
      - name: 🚀 Build Android Debug APK
        run: |
          ./gradlew --no-daemon :android:app:assembleDebug | tee build.log

      # 8️⃣ 빌드 산출물 업로드
      - name: 📦 Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: wkwhisperkey-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk

      # 9️⃣ Gradle 캐시 저장
      - name: ♻️ Save Gradle cache
        if: success()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}

      # 🔢 10️⃣ 자동 태그 계산
      - name: 🔢 Compute next tag
        id: tag
        run: |
          last=$(git describe --tags --abbrev=0 2>/dev/null || echo "wk-v0.1.0")
          base=${last%.*}
          num=${last##*.}
          next=$((num + 1))
          tagname="${base}.${next}"
          echo "next_tag=$tagname" >> $GITHUB_OUTPUT
          echo "Next tag: $tagname"

      # 📜 11️⃣ 로그 tail 추출
      - name: 📜 Extract tail of build log
        id: taillog
        if: success()
        run: |
          echo "tail<<EOF" >> $GITHUB_OUTPUT
          tail -n 20 build.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 🚀 12️⃣ GitHub Release 생성
      - name: 🚀 Create GitHub Release
        if: github.ref == 'refs/heads/main' && success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.next_tag }}
          name: "WkWhisperKey ${{ steps.tag.outputs.next_tag }}"
          body: |
            🧩 **WkWhisperKey Android Build**
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            - **NDK:** 26.1.10909125
            - **Build Time:** ${{ github.run_started_at }}

            ### 🧱 Recent Build Log (tail)
            ```
            ${{ steps.taillog.outputs.tail }}
            ```

            _Auto-generated by GitHub Actions_
          files: android/app/build/outputs/apk/debug/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
