name: Build & Auto-Release WkWhisperKey Android APK

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Kotlin Multiplatform + Android Build
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 저장소 체크아웃
      - name: 🧩 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      # 2️⃣ JDK 환경
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3️⃣ Gradle 래퍼 초기화
      - name: 🧱 Initialize Gradle Wrapper
        run: bash scripts/init-gradle.sh

      # 4️⃣ 🔑 해시 기반 캐시 키 생성
      - name: 🧮 Generate Cache Keys
        id: keys
        shell: bash
        run: |
          BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')
          # 코어툴 전체 해시 계산
          CORE_HASH=$(find /usr/local/lib/android/sdk -type f -maxdepth 3 -name "*" -print0 2>/dev/null | sort -z | xargs -0 sha256sum | sha256sum | cut -c1-64)
          echo "wkcore_key=wkcore-${{ runner.os }}-${CORE_HASH}" >> $GITHUB_OUTPUT
          echo "wkbuild_key=wkbuild-${BRANCH}" >> $GITHUB_OUTPUT
          echo "Core hash: $CORE_HASH"
          echo "Build key: wkbuild-${BRANCH}"

      # 5️⃣ NDK/CMake 코어툴 캐시 복원
      - name: ♻️ Restore Core Tool Cache
        id: corecache
        uses: actions/cache/restore@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: ${{ steps.keys.outputs.wkcore_key }}
          restore-keys: wkcore-
        env:
          ACTIONS_CACHE_COMPRESSION: gzip

      # 6️⃣ NDK 확인 및 설치
      - name: 📱 Ensure NDK
        run: |
          if [ ! -d /usr/local/lib/android/sdk/ndk/26.1.10909125 ]; then
            echo "Installing NDK..."
            yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "ndk;26.1.10909125"
            ./gradlew clean
          fi

      # 7️⃣ 고스트 정리
      - name: 🧹 Clean Ghost Files Only
        run: git clean -fdX

      # 8️⃣ Gradle / 빌드 캐시 복원
      - name: ♻️ Restore Build Cache
        id: buildcache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.gradle/caches
            android/app/build/intermediates
            android/app/.cxx
          key: ${{ steps.keys.outputs.wkbuild_key }}
          restore-keys: wkbuild-
        env:
          ACTIONS_CACHE_COMPRESSION: gzip

      # 9️⃣ 빌드 실행
      - name: 🚀 Build Android Debug APK
        run: |
          set -e
          ./gradlew --no-daemon :android:app:assembleDebug | tee build.log
          EXIT_CODE=${PIPESTATUS[0]}
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Gradle build failed with exit code $EXIT_CODE"
            exit $EXIT_CODE
          fi

      # 🔟 빌드 산출물 업로드
      - name: 📦 Upload APK Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: wkwhisperkey-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk

      # 11️⃣ 빌드 캐시 저장 (항상 최신본으로 갱신)
      - name: 💾 Save Build Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            android/app/build/intermediates
            android/app/.cxx
          key: ${{ steps.keys.outputs.wkbuild_key }}
        env:
          ACTIONS_CACHE_COMPRESSION: gzip

      # 12️⃣ 코어툴 캐시 저장 (해시 변경 시만)
      - name: 💾 Save Core Tool Cache
        if: steps.corecache.outputs.cache-hit != 'true' || failure()
        uses: actions/cache/save@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: ${{ steps.keys.outputs.wkcore_key }}
        env:
          ACTIONS_CACHE_COMPRESSION: gzip

      # 13️⃣ 로그 tail 출력
      - name: 📜 Extract Tail of Build Log
        id: taillog
        if: always()
        run: |
          echo "tail<<EOF" >> $GITHUB_OUTPUT
          tail -n 20 build.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 14️⃣ GitHub Release (main 전용)
      - name: 🚀 Create GitHub Release
        if: github.ref == 'refs/heads/main' && success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: wk-v${{ github.run_number }}
          name: "WkWhisperKey Build #${{ github.run_number }}"
          body: |
            ✅ Branch: **${{ github.ref_name }}**
            🧱 Build Run: **${{ github.run_number }}**
            🧩 Core Key: `${{ steps.keys.outputs.wkcore_key }}`
            🧰 Build Key: `${{ steps.keys.outputs.wkbuild_key }}`

            ```
            ${{ steps.taillog.outputs.tail }}
            ```
          files: android/app/build/outputs/apk/debug/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
