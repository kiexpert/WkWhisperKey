name: Build & Auto-Release WkWhisperKey Android APK

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Kotlin Multiplatform + Android Build
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 저장소 체크아웃
      - name: 🧩 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      # 2️⃣ JDK 환경
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3️⃣ Gradle 래퍼 초기화
      - name: 🧱 Initialize Gradle Wrapper
        run: bash scripts/init-gradle.sh

      # 4️⃣ 키 계산
      - name: 🔑 Compute Cache Keys
        id: keys
        run: |
          echo "core_key=wkcore-ubuntu" >> $GITHUB_OUTPUT
          echo "build_key=wkbuild-${GITHUB_REF_NAME//\//-}" >> $GITHUB_OUTPUT

      # 5️⃣ 코어 툴 해시 계산 (빌드 전)
      - name: 🧮 Compute Core Hash Before Build
        id: corehash_before
        run: |
          if [ -d /usr/local/lib/android/sdk ]; then
            find /usr/local/lib/android/sdk -type f -printf "%s %p\n" | sha256sum | cut -d' ' -f1 > core_before.txt
          else
            echo "none" > core_before.txt
          fi
          echo "hash_before=$(cat core_before.txt)" >> $GITHUB_OUTPUT

      # 6️⃣ 코어툴 캐시 복원
      - name: ♻️ Restore Core Tools
        id: corecache
        uses: actions/cache/restore@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: ${{ steps.keys.outputs.core_key }}
          restore-keys: wkcore-
          enableCrossOsArchive: false

      # 7️⃣ NDK 설치
      - name: 📱 Ensure NDK
        run: |
          if [ ! -d /usr/local/lib/android/sdk/ndk/26.1.10909125 ]; then
            yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "ndk;26.1.10909125"
            ./gradlew clean
          fi

      # 8️⃣ 고스트 정리
      - name: 🧹 Clean Ghost Files
        run: git clean -fdX

      # 9️⃣ 빌드캐시 복원
      - name: ♻️ Restore Build Cache
        id: buildcache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.gradle/caches
            android/app/build/intermediates
            android/app/.cxx
          key: ${{ steps.keys.outputs.build_key }}
          restore-keys: wkbuild-

      # 🔟 빌드 실행
      - name: 🚀 Build Android Debug APK
        run: |
          set -e
          ./gradlew --no-daemon :android:app:assembleDebug | tee build.log
          echo "exit_code=${PIPESTATUS[0]}" >> $GITHUB_ENV

      # 11️⃣ 코어 툴 해시 계산 (빌드 후)
      - name: 🧮 Compute Core Hash After Build
        id: corehash_after
        run: |
          find /usr/local/lib/android/sdk -type f -printf "%s %p\n" | sha256sum | cut -d' ' -f1 > core_after.txt
          echo "hash_after=$(cat core_after.txt)" >> $GITHUB_OUTPUT

      # 12️⃣ 해시 비교 및 캐시 삭제
      - name: 🧨 Remove Outdated Core Cache
        if: steps.corehash_before.outputs.hash_before != steps.corehash_after.outputs.hash_after
        run: |
          echo "Core hash changed, removing old caches..."
          gh api repos/${{ github.repository }}/actions/caches \
            --paginate -q '.actions_caches[].id' |
            xargs -I{} gh api repos/${{ github.repository }}/actions/caches/{} -X DELETE || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 13️⃣ 코어 캐시 저장 (항상 최신본)
      - name: 💾 Save Core Tools Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: ${{ steps.keys.outputs.core_key }}

      # 14️⃣ 빌드 캐시 저장 (브랜치별 최신본만)
      - name: 💾 Save Build Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            android/app/build/intermediates
            android/app/.cxx
          key: ${{ steps.keys.outputs.build_key }}

      # 15️⃣ 로그 tail
      - name: 📜 Extract Tail of Build Log
        if: always()
        run: tail -n 20 build.log
