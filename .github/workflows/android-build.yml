name: Build & Auto-Release WkWhisperKey Android APK

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Kotlin Multiplatform + Android Build
    runs-on: ubuntu-latest
    env:
      ACTIONS_CACHE_COMPRESSION: gzip

    steps:
      # 1️⃣ 저장소 체크아웃
      - name: 🧩 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      # 2️⃣ ☕ JDK
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3️⃣ Gradle 래퍼 초기화
      - name: 🧱 Initialize Gradle Wrapper
        run: bash scripts/init-gradle.sh

      # 4️⃣ ♻️ Restore Core Tool Cache (NDK/CMake)
      - name: ♻️ Restore Core Tool Cache
        id: corecache
        uses: actions/cache/restore@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: wkcore-${{ runner.os }}-${{ hashFiles('**/sdkmanager.log') }}
          restore-keys: |
            wkcore-${{ runner.os }}-

      # 5️⃣ 코어툴 확인
      - name: 📦 Ensure Core Tools
        run: |
          echo "🔍 Checking NDK/CMake..."
          if [ ! -d /usr/local/lib/android/sdk/ndk/26.1.10909125 ]; then
            yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "ndk;26.1.10909125"
          fi
          if [ ! -d /usr/local/lib/android/sdk/cmake/3.22.1 ]; then
            yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "cmake;3.22.1"
          fi
          echo "✅ Core tools ready."

      # 6️⃣ 브랜치별 이전 빌드캐시 삭제
      - name: 🧹 Delete Old Branch Caches
        if: always()
        run: |
          echo "🧹 Deleting old caches for branch: ${{ github.ref_name }}"
          gh cache list --limit 50 --json id,key | \
            jq -r '.[] | select(.key | startswith("wkbuild-${{ github.ref_name }}")) | .id' | \
            xargs -r -n1 gh cache delete || true
          echo "✅ Old build caches cleared."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 7️⃣ 타임스탬프 빌드캐시키 생성
      - name: 🕒 Generate Unique Build Cache Key
        id: buildkey
        run: |
          TS=$(date -u +'%Y%m%d-%H%M%S')
          echo "cache_key=wkbuild-${{ github.ref_name }}-${TS}" >> $GITHUB_OUTPUT
          echo "Generated key: wkbuild-${{ github.ref_name }}-${TS}"

      # 8️⃣ 캐시 복원
      - name: ♻️ Restore Build Cache
        id: buildcache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.gradle/caches
            android/app/build/intermediates
            android/app/.cxx
          key: ${{ steps.buildkey.outputs.cache_key }}
          restore-keys: |
            wkbuild-${{ github.ref_name }}-

      # 9️⃣ 클린
      - name: 🧹 Clean Ghost Files
        run: |
          git clean -fdX
          echo "✅ Clean done."

      # 🔟 빌드
      - name: 🚀 Build Android Debug APK
        run: |
          set -e
          ./gradlew --no-daemon :android:app:assembleDebug | tee build.log
          EXIT_CODE=${PIPESTATUS[0]}
          echo "BUILD_EXIT=$EXIT_CODE" >> $GITHUB_ENV
          exit $EXIT_CODE

      # 11️⃣ 코어툴 상태 갱신 + 해시 계산
      - name: 🔄 Update Core Tools
        if: always()
        run: |
          yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --update
          /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --list > sdkmanager.log
          HASH=$(sha256sum sdkmanager.log | cut -d' ' -f1)
          echo "new_hash=$HASH" >> $GITHUB_ENV
          echo "✅ Computed new hash: $HASH"

      # 12️⃣ 코어캐시 존재 확인
      - name: 🧮 Check if Core Cache Exists
        id: checkcache
        if: always()
        run: |
          gh cache list --limit 100 --json key | jq -r '.[].key' | grep -q "wkcore-${{ runner.os }}-${{ env.new_hash }}" && \
            echo "exists=true" >> $GITHUB_OUTPUT || echo "exists=false" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 13️⃣ 코어툴 저장 (신규/갱신시)
      - name: 💾 Save Core Tool Cache (if new)
        if: always() && steps.checkcache.outputs.exists == 'false'
        uses: actions/cache/save@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: wkcore-${{ runner.os }}-${{ env.new_hash }}

      # 14️⃣ 빌드캐시 저장 (항상, 중복없음)
      - name: 💾 Save Branch Build Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            android/app/build/intermediates
            android/app/.cxx
          key: ${{ steps.buildkey.outputs.cache_key }}

      # 15️⃣ 📦 Upload APK
      - name: 📦 Upload APK Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: wkwhisperkey-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk

      # 16️⃣ 🔢 Compute Next Tag
      - name: 🔢 Compute Next Tag
        id: tag
        run: |
          last=$(git describe --tags --abbrev=0 2>/dev/null || echo "wk-v0.1.0")
          base=${last%.*}
          num=${last##*.}
          next=$((num + 1))
          echo "next_tag=${base}.${next}" >> $GITHUB_OUTPUT
          echo "Next tag: ${base}.${next}"

      # 17️⃣ 📜 Extract Tail of Build Log
      - name: 📜 Extract Tail of Build Log
        id: taillog
        if: always()
        run: |
          echo "tail<<EOF" >> $GITHUB_OUTPUT
          tail -n 20 build.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 18️⃣ 🚀 Release (main only)
      - name: 🚀 Create GitHub Release
        if: github.ref == 'refs/heads/main' && success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.next_tag }}
          name: "WkWhisperKey ${{ steps.tag.outputs.next_tag }}"
          body: |
            🧩 **WkWhisperKey Android Build**
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            - **Gradle:** 8.7
            - **NDK:** 26.1.10909125
            - **Build Time:** ${{ github.run_started_at }}
            - **Exit Code:** ${{ env.BUILD_EXIT }}

            ### 🧱 Build Log (Tail)
            ```
            ${{ steps.taillog.outputs.tail }}
            ```
          files: android/app/build/outputs/apk/debug/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
