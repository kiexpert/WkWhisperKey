name: Build & Auto-Release WkWhisperKey Android APK

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Kotlin Multiplatform + Android Build
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 저장소 체크아웃
      - name: 🧩 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      # 2️⃣ ☕ JDK 17
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3️⃣ Gradle 초기화
      - name: 🧱 Initialize Gradle Wrapper
        run: bash scripts/init-gradle.sh

      # 4️⃣ ♻️ Core Tool Cache (NDK/CMake)
      - name: ♻️ Restore Core Tool Cache
        id: corecache
        uses: actions/cache/restore@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: wkcore-${{ runner.os }}-${{ hashFiles('**/sdkmanager.log') }}
          restore-keys: |
            wkcore-${{ runner.os }}-

      # 5️⃣ 📦 NDK/CMake 확인 및 설치
      - name: 📦 Ensure Core Tools
        run: |
          mkdir -p /usr/local/lib/android/sdk
          echo "🔍 Checking Android SDK core tools..."
          yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --update
          /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --list > sdkmanager.log
          if [ ! -d /usr/local/lib/android/sdk/ndk/26.1.10909125 ]; then
            echo "Installing NDK 26.1..."
            yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "ndk;26.1.10909125"
          fi
          if [ ! -d /usr/local/lib/android/sdk/cmake/3.22.1 ]; then
            echo "Installing CMake 3.22.1..."
            yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "cmake;3.22.1"
          fi
          echo "✅ Core tools ready."

      # 6️⃣ 💾 Core Tool Cache 재저장 (업데이트 감지 시)
      - name: 💾 Save Core Tool Cache if changed
        if: steps.corecache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: wkcore-${{ runner.os }}-${{ hashFiles('**/sdkmanager.log') }}

      # 7️⃣ ♻️ Branch Build Cache (Gradle/intermediates)
      - name: ♻️ Restore Branch Build Cache
        id: buildcache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.gradle/caches
            android/app/build/intermediates
            android/app/.cxx
          key: wkbuild-${{ github.ref_name }}
          restore-keys: |
            wkbuild-

      # 8️⃣ 🧹 Untracked Clean
      - name: 🧹 Clean Ghost Files
        run: |
          git clean -fdX
          echo "✅ Untracked & ignored files removed."

      # 9️⃣ 🚀 Build
      - name: 🚀 Build Android Debug APK
        run: |
          set -e
          ./gradlew --no-daemon :android:app:assembleDebug | tee build.log
          EXIT_CODE=${PIPESTATUS[0]}
          echo "BUILD_EXIT=$EXIT_CODE" >> $GITHUB_ENV
          exit $EXIT_CODE

      # 🔟 💾 Save Branch Cache (항상 저장)
      - name: 💾 Save Branch Build Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            android/app/build/intermediates
            android/app/.cxx
          key: wkbuild-${{ github.ref_name }}

      # 11️⃣ 📦 Upload APK
      - name: 📦 Upload APK Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: wkwhisperkey-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk

      # 12️⃣ 🔢 Compute Next Tag
      - name: 🔢 Compute Next Tag
        id: tag
        run: |
          last=$(git describe --tags --abbrev=0 2>/dev/null || echo "wk-v0.1.0")
          base=${last%.*}
          num=${last##*.}
          next=$((num + 1))
          echo "next_tag=${base}.${next}" >> $GITHUB_OUTPUT
          echo "Next tag: ${base}.${next}"

      # 13️⃣ 📜 Log tail
      - name: 📜 Extract Tail of Build Log
        id: taillog
        if: always()
        run: |
          echo "tail<<EOF" >> $GITHUB_OUTPUT
          tail -n 20 build.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 14️⃣ 🚀 Release (main only)
      - name: 🚀 Create GitHub Release
        if: github.ref == 'refs/heads/main' && success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.next_tag }}
          name: "WkWhisperKey ${{ steps.tag.outputs.next_tag }}"
          body: |
            🧩 **WkWhisperKey Android Build**
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            - **NDK:** 26.1.10909125
            - **Gradle:** 8.7
            - **Build Time:** ${{ github.run_started_at }}
            - **Exit:** ${{ env.BUILD_EXIT }}

            ### 🧱 Build Tail
            ```
            ${{ steps.taillog.outputs.tail }}
            ```

            _Auto-generated by GitHub Actions_
          files: android/app/build/outputs/apk/debug/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 🧹 Pull Request Merge 후 캐시 삭제
  cleanup:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: 🗑 Delete Branch Cache After Merge
        run: |
          echo "🧹 Deleting branch cache: ${{ github.event.pull_request.head.ref }}"
          gh cache list --limit 50 --json id,key | \
            jq -r '.[] | select(.key=="wkbuild-${{ github.event.pull_request.head.ref }}") | .id' | \
            xargs -r -n1 gh cache delete
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
