name: Build & Auto-Release WkWhisperKey Android APK

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Kotlin Multiplatform + Android Build
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 저장소 체크아웃
      - name: 🧩 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      # 2️⃣ JDK 17
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3️⃣ Gradle 래퍼 초기화
      - name: 🧱 Initialize Gradle Wrapper
        run: bash scripts/init-gradle.sh

      # 4️⃣ 캐시 키 생성
      - name: 🕒 Generate Cache Keys
        id: keys
        run: |
          BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')
          OS=$(lsb_release -si | tr '[:upper:]' '[:lower:]')
          VER=$(lsb_release -sr | tr -d '.')
          echo "wkcore_key=wkcore-${OS}${VER}" >> $GITHUB_OUTPUT
          echo "wkbuild_key=wkbuild-${BRANCH}" >> $GITHUB_OUTPUT

      # 5️⃣ 코어 캐시 복원 (NDK + CMake)
      - name: ♻️ Restore Core Cache
        id: corecache
        uses: actions/cache/restore@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: ${{ steps.keys.outputs.wkcore_key }}
          restore-keys: wkcore-

      # 6️⃣ 코어 해시 계산 (복구 후)
      - name: 🔍 Compute Core Hash Before Build
        id: corehash_before
        run: |
          find /usr/local/lib/android/sdk/ndk /usr/local/lib/android/sdk/cmake -maxdepth 2 -type d -printf "%f\n" 2>/dev/null | sort > corelist_before.txt
          sha256sum corelist_before.txt | cut -d ' ' -f1 > corehash_before.txt
          echo "core_hash_before=$(cat corehash_before.txt)" >> $GITHUB_OUTPUT

      # 7️⃣ NDK 보장
      - name: 📱 Ensure NDK
        run: |
          if [ ! -d /usr/local/lib/android/sdk/ndk/26.1.10909125 ]; then
            yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "ndk;26.1.10909125"
            ./gradlew clean
          fi

      # 8️⃣ 고스트 정리
      - name: 🧹 Clean Ghost Files
        run: git clean -fdX

      # 9️⃣ 빌드 캐시 복원 (브랜치별)
      - name: ♻️ Restore Build Cache
        id: buildcache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.gradle/caches
            android/app/build/intermediates
            android/app/.cxx
          key: ${{ steps.keys.outputs.wkbuild_key }}
          restore-keys: wkbuild-

      # 🔟 빌드 실행
      - name: 🚀 Build Android Debug APK
        run: |
          set -e
          ./gradlew --no-daemon :android:app:assembleDebug | tee build.log
          EXIT_CODE=${PIPESTATUS[0]}
          echo "exit_code=$EXIT_CODE" >> $GITHUB_ENV
          exit 0

      # 11️⃣ 코어 해시 계산 (빌드 후)
      - name: 🔍 Compute Core Hash After Build
        id: corehash_after
        run: |
          find /usr/local/lib/android/sdk/ndk /usr/local/lib/android/sdk/cmake -maxdepth 2 -type d -printf "%f\n" 2>/dev/null | sort > corelist_after.txt
          sha256sum corelist_after.txt | cut -d ' ' -f1 > corehash_after.txt
          echo "core_hash_after=$(cat corehash_after.txt)" >> $GITHUB_OUTPUT

      # 12️⃣ 코어 캐시 변경 감지 및 정리
      - name: 🧨 Purge Old Core Cache (if changed)
        if: steps.corehash_before.outputs.core_hash_before != steps.corehash_after.outputs.core_hash_after
        run: |
          echo "Core tool versions changed. Removing all old wkcore-* caches..."
          gh cache list --limit 1000 | grep wkcore- | cut -f1 | while read id; do
            echo "Deleting cache $id"
            gh cache delete "$id" || true
          done

      # 13️⃣ 새 코어 캐시 저장
      - name: 💾 Save Core Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: ${{ steps.keys.outputs.wkcore_key }}

      # 14️⃣ 빌드 캐시 정리 + 저장
      - name: 💾 Save Build Cache
        if: always()
        run: |
          echo "Deleting old wkbuild caches for this branch..."
          gh cache list --limit 1000 | grep "wkbuild-${GITHUB_REF_NAME}" | cut -f1 | while read id; do
            gh cache delete "$id" || true
          done
        shell: bash

      - name: ♻️ Save Latest Build Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            android/app/build/intermediates
            android/app/.cxx
          key: ${{ steps.keys.outputs.wkbuild_key }}

      # 15️⃣ APK 업로드
      - name: 📦 Upload APK Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: wkwhisperkey-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
