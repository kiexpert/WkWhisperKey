name: Build & Auto-Release WkWhisperKey Android APK

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Kotlin Multiplatform + Android Build
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout
      - name: 🧩 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      # 2️⃣ JDK
      - name: ☕ Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3️⃣ Gradle Wrapper
      - name: 🧱 Init Gradle Wrapper
        run: bash scripts/init-gradle.sh

      # 4️⃣ 최신 wkcore 캐시 검색 및 복원
      - name: 🔍 Find and Restore Latest wkcore Cache
        id: restore_core
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "🔍 Searching latest wkcore cache..."
          gh cache list --limit 1000 --json key,lastAccessedAt,id | \
            jq -r '.[] | select(.key | startswith("wkcore-")) | [.id,.key,.lastAccessedAt] | @tsv' \
            | sort -k3 -r | tee all_core_caches.txt | head -n1 > latest_core.txt

          if [ -s latest_core.txt ]; then
            LATEST_ID=$(cut -f1 latest_core.txt)
            LATEST_KEY=$(cut -f2 latest_core.txt)
            echo "✅ Latest core cache: $LATEST_KEY"
            echo "core_key=$LATEST_KEY" >> $GITHUB_OUTPUT

            echo "🧹 Removing old wkcore caches..."
            grep -v "$LATEST_KEY" all_core_caches.txt | cut -f1 | while read id; do
              gh cache delete "$id" --confirm || true
            done
          else
            echo "⚠️ No wkcore cache found."
          fi

      - name: ♻️ Restore Core Cache
        if: steps.restore_core.outputs.core_key != ''
        uses: actions/cache/restore@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: ${{ steps.restore_core.outputs.core_key }}
          restore-keys: wkcore-

      # 5️⃣ Ensure NDK if missing
      - name: 📱 Ensure NDK
        run: |
          if [ ! -d /usr/local/lib/android/sdk/ndk ]; then
            yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "ndk;26.1.10909125"
          fi

      # 6️⃣ Clean untracked files
      - name: 🧹 Clean Ghost Files
        run: git clean -fdX

      # 7️⃣ Build APK
      - name: 🚀 Build Android Debug APK
        run: |
          set -e
          ./gradlew --no-daemon :android:app:assembleDebug | tee build.log
          EXIT_CODE=${PIPESTATUS[0]}
          echo "exit_code=$EXIT_CODE" >> $GITHUB_ENV
          exit $EXIT_CODE

      # 8️⃣ Save Core Cache (always)
      - name: 💾 Save Core Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: wkcore-${{ github.run_id }}

      # 9️⃣ Delete old wkbuild caches
      - name: 🧹 Delete old wkbuild caches
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Deleting old wkbuild caches for this branch..."
          gh cache list --json id,key | jq -r --arg prefix "wkbuild-${{ github.ref_name }}" \
            '.[] | select(.key | startswith($prefix)) | [.id,.key] | @tsv' > build_caches.txt
          NEW_KEY="wkbuild-${{ github.ref_name }}-${{ github.run_id }}"
          grep -v "$NEW_KEY" build_caches.txt | cut -f1 | while read id; do
            gh cache delete "$id" --confirm || true
          done

      # 🔟 Save new wkbuild cache
      - name: 💾 Save Build Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            android/app/build/intermediates
            android/app/.cxx
          key: wkbuild-${{ github.ref_name }}-${{ github.run_id }}

      # 11️⃣ Upload APK
      - name: 📦 Upload APK Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: wkwhisperkey-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk

      # 12️⃣ Compute next tag
      - name: 🔢 Compute Next Tag
        id: tag
        run: |
          last=$(git describe --tags --abbrev=0 2>/dev/null || echo "wk-v0.1.0")
          base=${last%.*}
          num=${last##*.}
          next=$((num + 1))
          echo "next_tag=${base}.${next}" >> $GITHUB_OUTPUT
          echo "Next tag: ${base}.${next}"

      # 13️⃣ Extract tail of build log
      - name: 📜 Extract Tail of Build Log
        id: taillog
        if: always()
        run: |
          echo "tail<<EOF" >> $GITHUB_OUTPUT
          tail -n 20 build.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 14️⃣ Auto-Release (main only)
      - name: 🚀 Create GitHub Release
        if: github.ref == 'refs/heads/main' && success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.next_tag }}
          name: "WkWhisperKey ${{ steps.tag.outputs.next_tag }}"
          body: |
            🧩 **WkWhisperKey Android Build**
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            - **Gradle:** 8.7
            - **NDK:** 26.1.10909125
            - **Build Time:** ${{ github.run_started_at }}

            ### 🧱 Recent Build Log
            ```
            ${{ steps.taillog.outputs.tail }}
            ```

            _Auto-generated by GitHub Actions_
          files: android/app/build/outputs/apk/debug/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
