name: Build & Auto-Release WkWhisperKey Android APK (v3.4)

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Kotlin Multiplatform + Android Build
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 저장소 체크아웃
      - name: 🧩 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      # 2️⃣ JDK 환경
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3️⃣ Gradle 래퍼 초기화
      - name: 🧱 Initialize Gradle Wrapper
        run: bash scripts/init-gradle.sh

      # 4️⃣ 최신 코어 캐시 복구 + 이전 캐시 정리
      - name: 🔍 Find & Restore Latest Core Cache
        id: corecache
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "🔎 Searching latest wkcore cache..."
          gh cache list --limit 1000 --json key,id,lastAccessedAt | \
            jq -r '.[] | select(.key | startswith("wkcore-")) | [.id,.key,.lastAccessedAt] | @tsv' \
            | sort -k3 -r > core_list.txt

          if [ -s core_list.txt ]; then
            LATEST_KEY=$(head -n1 core_list.txt | cut -f2)
            echo "latest_core_key=$LATEST_KEY" >> $GITHUB_OUTPUT
            echo "🟢 Restoring: $LATEST_KEY"
            tail -n +2 core_list.txt | cut -f1 | while read id; do
              echo "🧨 Deleting old core cache ID=$id"
              gh cache delete "$id" || true
            done
          else
            echo "⚠️ No existing core cache found"
            echo "latest_core_key=" >> $GITHUB_OUTPUT
          fi

      - name: ♻️ Restore Core Cache (if found)
        if: steps.corecache.outputs.latest_core_key != ''
        uses: actions/cache/restore@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: ${{ steps.corecache.outputs.latest_core_key }}

      # 5️⃣ 최신 빌드 캐시 복구 + 이전 캐시 정리
      - name: 🔍 Find & Restore Latest Build Cache
        id: buildcache
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')
          echo "🔎 Searching latest wkbuild cache for branch $BRANCH..."
          gh cache list --limit 1000 --json key,id,lastAccessedAt | \
            jq -r --arg b "wkbuild-${BRANCH}" \
              '.[] | select(.key | startswith($b)) | [.id,.key,.lastAccessedAt] | @tsv' \
            | sort -k3 -r > build_list.txt

          if [ -s build_list.txt ]; then
            LATEST_KEY=$(head -n1 build_list.txt | cut -f2)
            echo "latest_build_key=$LATEST_KEY" >> $GITHUB_OUTPUT
            echo "🟢 Restoring: $LATEST_KEY"
            tail -n +2 build_list.txt | cut -f1 | while read id; do
              echo "🧨 Deleting old build cache ID=$id"
              gh cache delete "$id" || true
            done
          else
            echo "⚠️ No existing build cache found"
            echo "latest_build_key=" >> $GITHUB_OUTPUT
          fi

      - name: ♻️ Restore Build Cache (if found)
        if: steps.buildcache.outputs.latest_build_key != ''
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.gradle/caches
            android/app/build/intermediates
            android/app/.cxx
          key: ${{ steps.buildcache.outputs.latest_build_key }}

      # 6️⃣ Clean ghost files only
      - name: 🧹 Clean Ghost Files Only
        run: |
          git clean -fdX
          echo "✅ Removed ghost files"

      # 7️⃣ Build
      - name: 🚀 Build Android Debug APK
        run: |
          set -e
          ./gradlew --no-daemon :android:app:assembleDebug | tee build.log
          EXIT_CODE=${PIPESTATUS[0]}
          echo "exit_code=$EXIT_CODE" >> $GITHUB_ENV
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Gradle build failed with exit code $EXIT_CODE"
            exit $EXIT_CODE
          fi

      # 8️⃣ 빌드 산출물 업로드
      - name: 📦 Upload APK Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: wkwhisperkey-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk

      # 9️⃣ 새 캐시 저장 (성공/실패 관계없이)
      - name: 💾 Save Core Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            /usr/local/lib/android/sdk/ndk
            /usr/local/lib/android/sdk/cmake
          key: wkcore-${{ runner.os }}-${{ github.run_id }}

      - name: 💾 Save Build Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            android/app/build/intermediates
            android/app/.cxx
          key: wkbuild-${{ github.ref_name }}-${{ github.run_id }}

      # 🔟 자동 태그 계산
      - name: 🔢 Compute Next Tag
        id: tag
        run: |
          last=$(git describe --tags --abbrev=0 2>/dev/null || echo "wk-v0.1.0")
          base=${last%.*}
          num=${last##*.}
          next=$((num + 1))
          echo "next_tag=${base}.${next}" >> $GITHUB_OUTPUT
          echo "Next tag: ${base}.${next}"

      # 11️⃣ 로그 tail 추출
      - name: 📜 Extract Tail of Build Log
        id: taillog
        if: always()
        run: |
          echo "tail<<EOF" >> $GITHUB_OUTPUT
          tail -n 20 build.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 12️⃣ GitHub Release 자동 생성 (main 전용)
      - name: 🚀 Create GitHub Release
        if: github.ref == 'refs/heads/main' && success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.next_tag }}
          name: "WkWhisperKey ${{ steps.tag.outputs.next_tag }}"
          body: |
            🧩 **WkWhisperKey Android Build**
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            - **Gradle:** 8.7
            - **Build Time:** ${{ github.run_started_at }}

            ### 🧱 Build Log (tail)
            ```
            ${{ steps.taillog.outputs.tail }}
            ```

            _Auto-generated by GitHub Actions_
          files: android/app/build/outputs/apk/debug/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
